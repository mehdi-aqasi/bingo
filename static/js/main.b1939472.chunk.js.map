{"version":3,"sources":["logic/data.js","logic/bingoStructure.js","logic/bingoLogic.js","appContext.js","bingoCell.jsx","bingo.jsx","App.js","reportWebVitals.js","index.js"],"names":["listOfSentences","listOfMatrixCells","listOfSelectedCells","ids","initializeBingoMatrix","length","i","j","cell","Math","floor","bound","createCell","generateId","splice","random","push","id","rowIndex","columnIndex","data","isSelected","findCellsByDiagonalLeft","isMatrixFull","filter","findCellsByDiagonalRight","findCellsByRowIndex","findCellsByColumnIndex","flagRepetitionId","includes","howBingo","checkIsBingo","isCellInDiagonal","result","checkDiagonalLeftIsCompleted","checkDiagonalRightIsCompleted","checkRowIsCompleted","checkColumnIsCompleted","activateCell","findCellById","addCell","find","AppContext","React","createContext","BingoCell","props","myContext","useContext","useState","cellClassName","setCellClassName","isBingo","className","listOfGreen","map","item","getIdsOfBingo","getRenderClassName","onClick","Bingo","bingoMatrix","split","letter","App","setIsBingo","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1939472.chunk.js","sourcesContent":["export const listOfSentences = [\r\n  \"(child noises in the bg)\",\r\n  \"Hello, hello?\",\r\n  \"I need to jump in another call\",\r\n  \"Can everyone go on mute?\",\r\n  \"Could u please got close to the mic?\",\r\n  \"(load pain echo feedback)\",\r\n  \"Next slide please.\",\r\n  \"Can we take this offline?\",\r\n  \"Is ___ on the call?\",\r\n  \"Could u share this afterwards?\",\r\n  \"Can sb grant presenter rights?\",\r\n  \"Can u email that to everyone?\",\r\n  \"Sorry, I have problems in logging in\",\r\n  \"(animal noises in the bg)\",\r\n  \"Sorry, I didn't find the conf id\",\r\n  \"I was having connection issue\",\r\n  \"I'll have to get back to u\",\r\n  \"Who just joined?\",\r\n  \"Sorry, sth ___ with my calender\",\r\n  \"Do u see my screen?\",\r\n  \"Let's wait for ___!\",\r\n  \"u will send the minutes\",\r\n  \"Sorry, I was on mute.\",\r\n  \"Can u repeat please?\",\r\n];\r\n","import { listOfSentences } from \"./data\";\r\n\r\n\r\nexport let listOfMatrixCells = [];\r\nexport let listOfSelectedCells = [];\r\nexport let ids = [];\r\nexport const bound = 5;\r\n\r\nexport const initializeBingoMatrix = () => {\r\n  if (listOfMatrixCells.length === 25) return listOfMatrixCells;\r\n  for (let i = 0; i < bound; i++) {\r\n    for (let j = 0; j < bound; j++) {\r\n      let cell = null;\r\n      if (i === Math.floor(bound / 2) && i === j) {\r\n        cell = createCell(\r\n          generateId(j),\r\n          i,\r\n          j,\r\n          \"CONF CALL BINGO!! ðŸ˜·ðŸ’œ  \",\r\n          true\r\n        );\r\n      } else {\r\n        cell = createCell(\r\n          generateId(j),\r\n          i,\r\n          j,\r\n          listOfSentences.splice(\r\n            Math.floor(Math.random() * (listOfSentences.length - 1)),\r\n            1\r\n          ),\r\n          false\r\n        );\r\n      }\r\n\r\n      listOfMatrixCells.push(cell);\r\n    }\r\n  }\r\n\r\n  return listOfMatrixCells;\r\n};\r\n\r\n\r\nconst createCell = (id, rowIndex, columnIndex, data, isSelected) => {\r\n  const cell = {\r\n    id,\r\n    rowIndex,\r\n    columnIndex,\r\n    data,\r\n    isSelected,\r\n  };\r\n  return cell;\r\n};\r\n\r\nexport const addCell = (cell) => {\r\n  listOfSelectedCells.push(cell);\r\n};\r\n\r\n\r\nexport const findCellByRowAndColumnIndex = (rowIndex, columnIndex) => {\r\n  return (\r\n    isMatrixFull() &&\r\n    listOfMatrixCells.find(\r\n      (cell) => cell.rowIndex === rowIndex && cell.columnIndex === columnIndex\r\n    )\r\n  );\r\n};\r\n\r\nexport const findCellsByDiagonalLeft = () => {\r\n  return (\r\n    isMatrixFull() &&\r\n    listOfMatrixCells.filter(\r\n      (cell) => cell.rowIndex === cell.columnIndex && cell.isSelected === true\r\n    )\r\n  );\r\n};\r\n\r\nexport const findCellsByDiagonalRight = () => {\r\n  return (\r\n    isMatrixFull() &&\r\n    listOfMatrixCells.filter(\r\n      (cell) =>\r\n        cell.rowIndex + cell.columnIndex === 4 && cell.isSelected === true\r\n    )\r\n  );\r\n};\r\n\r\nexport const findCellsByRowIndex = (rowIndex) => {\r\n  return (\r\n    isMatrixFull() &&\r\n    listOfMatrixCells.filter(\r\n      (cell) => cell.rowIndex === rowIndex && cell.isSelected === true\r\n    )\r\n  );\r\n};\r\n\r\nexport const findCellsByColumnIndex = (columnIndex) => {\r\n  return (\r\n    isMatrixFull() &&\r\n    listOfMatrixCells.filter(\r\n      (cell) => cell.columnIndex === columnIndex && cell.isSelected === true\r\n    )\r\n  );\r\n};\r\n\r\nexport const isMatrixFull = () => {\r\n  return listOfMatrixCells && listOfMatrixCells.length ? true : false;\r\n};\r\n\r\nexport const generateId = (columnIndex) => {\r\n  let flagRepetitionId = true;\r\n  let id = null;\r\n  while (flagRepetitionId) {\r\n    switch (columnIndex) {\r\n      case 0:\r\n        id = Math.floor(Math.random() * (16 - 1) + 1);\r\n        break;\r\n      case 1:\r\n        id = Math.floor(Math.random() * (31 - 16) + 16);\r\n        break;\r\n      case 2:\r\n        id = Math.floor(Math.random() * (46 - 31) + 31);\r\n        break;\r\n      case 3:\r\n        id = Math.floor(Math.random() * (61 - 46) + 46);\r\n        break;\r\n      case 4:\r\n        id = Math.floor(Math.random() * (76 - 61) + 61);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    flagRepetitionId = ids.includes(id);\r\n  }\r\n  ids.push(id);\r\n  return id;\r\n};\r\n","import {\r\n  listOfMatrixCells,\r\n  listOfSelectedCells,\r\n  bound,\r\n  addCell,\r\n  isMatrixFull,\r\n  findCellsByDiagonalLeft,\r\n  findCellsByDiagonalRight,\r\n  findCellsByRowIndex,\r\n  findCellsByColumnIndex,\r\n} from \"./bingoStructure\";\r\n\r\nlet howBingo = \"\"; // DiagonalLeft,DiagonalRight,Row,Column,\r\n\r\nconst isCellInDiagonal = (rowIndex, columnIndex) => {\r\n  return rowIndex === columnIndex || rowIndex + columnIndex === bound - 1;\r\n};\r\n\r\nconst permitCheck = (rowIndex, columnIndex) => {\r\n  return rowIndex === 2 && columnIndex === 2\r\n    ? false\r\n    : listOfSelectedCells.length < bound - 1\r\n    ? false\r\n    : true;\r\n};\r\n\r\nconst checkDiagonalLeftIsCompleted = () => {\r\n  let result = isMatrixFull() && findCellsByDiagonalLeft().length === 5;\r\n  howBingo = result ? \"DiagonalLeft\" : \"\";\r\n  return result;\r\n};\r\n\r\nconst checkDiagonalRightIsCompleted = () => {\r\n  let result = isMatrixFull() && findCellsByDiagonalRight().length === 5;\r\n  howBingo = result ? \"DiagonalRight\" : \"\";\r\n  return result;\r\n};\r\n\r\nconst checkRowIsCompleted = (rowIndex) => {\r\n  let result = findCellsByRowIndex(rowIndex).length === 5;\r\n  howBingo = result ? \"Row\" : \"\";\r\n  return result;\r\n};\r\n\r\nconst checkColumnIsCompleted = (columnIndex) => {\r\n  let result = findCellsByColumnIndex(columnIndex).length === 5;\r\n  howBingo = result ? \"Column\" : \"\";\r\n  return result;\r\n};\r\n\r\nconst checkIsBingo = (cell) => {\r\n  if (permitCheck(cell.rowIndex, cell.columnIndex)) {\r\n    if (\r\n      (isCellInDiagonal(cell.rowIndex, cell.columnIndex) &&\r\n        (checkDiagonalLeftIsCompleted() || checkDiagonalRightIsCompleted())) ||\r\n      checkRowIsCompleted(cell.rowIndex) ||\r\n      checkColumnIsCompleted(cell.columnIndex)\r\n    )\r\n      return true;\r\n    return false;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const activateCell = (id) => {\r\n  let cell = findCellById(id);\r\n  cell.isSelected = true;\r\n  addCell(cell);\r\n  return checkIsBingo(cell);\r\n};\r\n\r\nconst findCellById = (id) => {\r\n  return isMatrixFull() && listOfMatrixCells.find((cell) => cell.id === id);\r\n};\r\n\r\n\r\nexport const getIdsOfBingo = () => {\r\n  switch (howBingo) {\r\n    case \"\":\r\n      return [];\r\n    case \"DiagonalRight\":\r\n      return findCellsByDiagonalRight().map((item) => item.id);\r\n    case \"DiagonalLeft\":\r\n      return findCellsByDiagonalLeft().map((cell) => cell.id);\r\n    case \"Row\":\r\n      return findCellsByRowIndex(\r\n        listOfSelectedCells[listOfSelectedCells.length - 1].rowIndex\r\n      ).map((cell) => cell.id);\r\n    case \"Column\":\r\n      return findCellsByColumnIndex(\r\n        listOfSelectedCells[listOfSelectedCells.length - 1].columnIndex\r\n      ).map((cell) => cell.id);\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n","import React from \"react\";\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;","import { useState, useContext } from \"react\";\r\nimport { getIdsOfBingo } from \"./logic/bingoLogic\";\r\nimport AppContext from \"./appContext\";\r\n\r\nexport const BingoCell = (props) => {\r\n  const myContext = useContext(AppContext);\r\n  const { cell, activateCell } = props;\r\n\r\n  let [cellClassName, setCellClassName] = useState(\r\n    cell.rowIndex === cell.columnIndex && cell.rowIndex === Math.floor(5 / 2)\r\n      ? \"BingoCellBase BingoCellSelected\"\r\n      : \"BingoCellBase\"\r\n  );\r\n\r\n  let handleClick = (id) => {\r\n    setCellClassName(\"BingoCellBase BingoCellSelected\");\r\n    myContext(activateCell(id));\r\n  };\r\n\r\n  let getRenderClassName = (cell) => {\r\n    let listOfGreen = getIdsOfBingo();\r\n    if (!cell.isSelected) return \"BingoCellBase BingoCellIsBingo\";\r\n    else if (cell.isSelected && listOfGreen.includes(cell.id))\r\n      return \"BingoCellBase BingoCellIsBingo BingoCellIsBingoColor\";\r\n    else if (cell.isSelected)\r\n      return \"BingoCellBase BingoCellSelected BingoCellIsBingo\";\r\n  };\r\n  //   console.log(props.isBingo);\r\n  return (\r\n    <>\r\n      {props.isBingo ? (\r\n        <span className={getRenderClassName(cell)} >{cell.data}</span>\r\n      ) : (\r\n        <span onClick={() => handleClick(cell.id)} className={cellClassName}>\r\n          {cell.data}\r\n        </span>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import {useState} from \"react\"\r\nimport { initializeBingoMatrix } from \"./logic/bingoStructure\";\r\nimport {activateCell} from \"./logic/bingoLogic\"\r\nimport { BingoCell } from \"./bingoCell.jsx\";\r\n\r\nexport const Bingo = (props) => {\r\n  let [bingoMatrix, setBingoMatrix] = useState(initializeBingoMatrix);\r\n  \r\n  let header = \"BINGO\";\r\n  return (\r\n    <>\r\n      {header.split(\"\").map((letter) => (\r\n        <span className=\"BingoParentHeader\" key={letter}>\r\n          {letter}\r\n        </span>\r\n      ))}\r\n\r\n      {bingoMatrix &&\r\n        bingoMatrix.map((cell) => {\r\n          return (\r\n            <BingoCell\r\n              cell={cell}\r\n              key={cell.id}\r\n              activateCell={activateCell}\r\n              isBingo={props.isBingo}\r\n            />\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport \"./fireWork.css\"\nimport { Bingo } from \"./bingo.jsx\";\nimport AppContext from \"./appContext\"\nimport {useState} from \"react\"\n\nfunction App() {\n  const [isBingo, setIsBingo] = useState(false);\n  return (\n    <div className=\"App\">\n      {isBingo && (\n        <div className=\"pyro\">\n          <div className=\"before\"></div>\n          <div className=\"after\"></div>\n        </div>\n      )}\n      <div className=\"BingoParent\">\n        <AppContext.Provider value={setIsBingo}>\n          <Bingo isBingo={isBingo}></Bingo>\n        </AppContext.Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}